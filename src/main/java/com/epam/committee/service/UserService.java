package com.epam.committee.service;

import com.epam.committee.entity.User;
import com.epam.committee.exception.ServiceException;

import java.util.Map;
import java.util.Optional;


public interface UserService {
    /**
     * Creates and returns (after update a database) autogenerated (@code User) id
     * Sets generated id  as {@code Client} object id. Creates  and
     * updates database with a new row that represents this {@code Client} object.
     * If the update is successful, returns {@code true} if the table has such row, {@code false} otherwise
     *
     * @param parameters contain parameters to create (@code User) login, password, client and parameters to create
     *                   (@code Client) first name, last name, address, telephone number
     * @return an Optional {@code User} if the row was inserted, otherwise Optional.empty()
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    Optional<User> registerEntrant(Map<String, String> parameters) throws ServiceException;

    /**
     * Check if a {@code User} exists in database  with this login .
     *
     * @param login a user login
     * @return a {@code true} if User exists, {@code false} otherwise
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */

    boolean checkUserLogin(String login) throws ServiceException;
    /**
     * Checks if row with login and password exists in database.
     *
     * @param login    a user login
     * @param password a user password
     * @return a {@code true} if User exists, {@code false} otherwise
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean findUserByLoginAndPassword(String login, String password) throws ServiceException;
    /**
     * Gets userRole id from a database using user login.
     *
     * @param login user login to find {@code User}
     * @return a founded and created int value of  userRole id
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    int getUserRoleId(String login) throws ServiceException;
    /**
     * Gets (after finding and creating) a {@code Optional<User>} object from a database using user login.
     *
     * @param login user login to find and create the {@code User} object
     * @return a founded and created {@code Optional<User>} object
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    Optional<User> findByLogin(String login) throws ServiceException;
    /**
     * Updates a database with new password value,
     * sets this value to the current {@code User} object after the update.
     *
     * @param user        a {@code User} object to change
     * @param newPassword a new password value
     * @return {@code true} if {@code User} was updated, otherwise
     * @throws ServiceException if {@code DaoException} occurs (database access error)
     */
    boolean changePassword(User user, String newPassword) throws ServiceException;
}
